CP: Access Modifiers VP : public line : 1
CP: Category VP : abstract line : 1
CP: class VP : class line : 1
CP: Identifier VP : a line : 1
CP: extends VP : extends line : 1
CP: Identifier VP : b line : 1
CP: { VP : { line : 2
CP: Access Modifiers VP : public line : 3
CP: static VP : static line : 3
CP: Category VP : final line : 3
CP: Data Types VP : var line : 3
CP: Identifier VP : a line : 3
CP: [ VP : [ line : 3
CP: ] VP : ] line : 3
CP: = VP : = line : 3
CP: new VP : new line : 3
CP: Data Types VP : var line : 3
CP: [ VP : [ line : 3
CP: Var_Integer VP : 6 line : 3
CP: ] VP : ] line : 3
CP: ; VP : ; line : 3
CP: Data Types VP : stack line : 4
CP: Identifier VP : a line : 4
CP: [ VP : [ line : 4
CP: ] VP : ] line : 4
CP: [ VP : [ line : 4
CP: ] VP : ] line : 4
CP: = VP : = line : 4
CP: new VP : new line : 4
CP: Data Types VP : stack line : 4
CP: [ VP : [ line : 4
CP: Var_Integer VP : 6 line : 4
CP: ] VP : ] line : 4
CP: [ VP : [ line : 4
CP: Var_Integer VP : 3 line : 4
CP: ] VP : ] line : 4
CP: ; VP : ; line : 4
CP: Data Types VP : var line : 5
CP: Identifier VP : xyz line : 5
CP: [ VP : [ line : 5
CP: ] VP : ] line : 5
CP: [ VP : [ line : 5
CP: ] VP : ] line : 5
CP: = VP : = line : 5
CP: { VP : { line : 5
CP: Var_Integer VP : 1 line : 5
CP: , VP : , line : 5
CP: ( VP : ( line : 5
CP: INC/DEC VP : ++ line : 5
CP: Identifier VP : a line : 5
CP: Plus/Minus VP : + line : 5
CP: Identifier VP : b line : 5
CP: Bitwise Operators VP : | line : 5
CP: Identifier VP : c line : 5
CP: ) VP : ) line : 5
CP: , VP : , line : 5
CP: Var_Integer VP : 3 line : 5
CP: } VP : } line : 5
CP: , VP : , line : 5
CP: { VP : { line : 6
CP: Identifier VP : a line : 6
CP: , VP : , line : 6
CP: Var_Bool VP : true line : 6
CP: , VP : , line : 6
CP: Identifier VP : t line : 6
CP: } VP : } line : 6
CP: , VP : , line : 6
CP: { VP : { line : 7
CP: Var_String VP : "safi" line : 7
CP: , VP : , line : 7
CP: Var_Integer VP : 5 line : 7
CP: , VP : , line : 7
CP: Var_Char VP : 's' line : 7
CP: } VP : } line : 7
CP: ; VP : ; line : 7
CP: construct VP : construct line : 9
CP: ( VP : ( line : 9
CP: ) VP : ) line : 9
CP: { VP : { line : 9
CP: this VP : this line : 10
CP: ( VP : ( line : 10
CP: Identifier VP : a line : 10
CP: , VP : , line : 10
CP: Identifier VP : f line : 10
CP: , VP : , line : 10
CP: Identifier VP : z line : 10
CP: ) VP : ) line : 10
CP: ; VP : ; line : 10
CP: } VP : } line : 11
CP: construct VP : construct line : 13
CP: ( VP : ( line : 13
CP: Data Types VP : stack line : 13
CP: Identifier VP : a line : 13
CP: , VP : , line : 13
CP: Identifier VP : d line : 13
CP: Identifier VP : f line : 13
CP: [ VP : [ line : 13
CP: ] VP : ] line : 13
CP: , VP : , line : 13
CP: Data Types VP : var line : 13
CP: Identifier VP : z line : 13
CP: ) VP : ) line : 13
CP: { VP : { line : 14
CP: super VP : super line : 15
CP: ( VP : ( line : 15
CP: Identifier VP : a line : 15
CP: , VP : , line : 15
CP: Var_Integer VP : 5 line : 15
CP: ) VP : ) line : 15
CP: ; VP : ; line : 15
CP: this VP : this line : 16
CP: . VP : . line : 16
CP: Identifier VP : a line : 16
CP: = VP : = line : 16
CP: super VP : super line : 16
CP: . VP : . line : 16
CP: Identifier VP : b line : 16
CP: ; VP : ; line : 16
CP: Identifier VP : b line : 17
CP: = VP : = line : 17
CP: new VP : new line : 17
CP: Identifier VP : v line : 17
CP: ( VP : ( line : 17
CP: ) VP : ) line : 17
CP: ; VP : ; line : 17
CP: Identifier VP : a line : 19
CP: = VP : = line : 19
CP: new VP : new line : 19
CP: Data Types VP : var line : 19
CP: [ VP : [ line : 19
CP: Var_Integer VP : 5 line : 19
CP: ] VP : ] line : 19
CP: ; VP : ; line : 19
CP: Identifier VP : a line : 20
CP: [ VP : [ line : 20
CP: Var_Integer VP : 0 line : 20
CP: ] VP : ] line : 20
CP: [ VP : [ line : 20
CP: Var_Integer VP : 4 line : 20
CP: ] VP : ] line : 20
CP: = VP : = line : 20
CP: Identifier VP : a line : 20
CP: [ VP : [ line : 20
CP: Var_Integer VP : 3 line : 20
CP: ] VP : ] line : 20
CP: [ VP : [ line : 20
CP: Var_Integer VP : 2 line : 20
CP: ] VP : ] line : 20
CP: ; VP : ; line : 20
CP: Identifier VP : a line : 21
CP: [ VP : [ line : 21
CP: Var_Integer VP : 1 line : 21
CP: ] VP : ] line : 21
CP: = VP : = line : 21
CP: Var_Char VP : 'd' line : 21
CP: ; VP : ; line : 21
CP: Identifier VP : fd line : 23
CP: Identifier VP : c line : 23
CP: = VP : = line : 23
CP: new VP : new line : 23
CP: Identifier VP : fd line : 23
CP: ( VP : ( line : 23
CP: ) VP : ) line : 23
CP: ; VP : ; line : 23
CP: Data Types VP : var line : 24
CP: Identifier VP : b line : 24
CP: = VP : = line : 24
CP: Identifier VP : a line : 24
CP: Relational Operators VP : > line : 24
CP: Var_Integer VP : 5 line : 24
CP: Logical Operators VP : || line : 24
CP: ! VP : ! line : 24
CP: ( VP : ( line : 24
CP: Identifier VP : a line : 24
CP: Relational Operators VP : > line : 24
CP: Var_Integer VP : 6 line : 24
CP: ) VP : ) line : 24
CP: ; VP : ; line : 24
CP: Data Types VP : stack line : 25
CP: Identifier VP : c line : 25
CP: = VP : = line : 25
CP: Identifier VP : a line : 25
CP: [ VP : [ line : 25
CP: Var_Integer VP : 3 line : 25
CP: ] VP : ] line : 25
CP: [ VP : [ line : 25
CP: Var_Integer VP : 5 line : 25
CP: ] VP : ] line : 25
CP: . VP : . line : 25
CP: Identifier VP : safi line : 25
CP: ( VP : ( line : 25
CP: ) VP : ) line : 25
CP: ; VP : ; line : 25
CP: Data Types VP : queue line : 26
CP: Identifier VP : d line : 26
CP: = VP : = line : 26
CP: ( VP : ( line : 26
CP: INC/DEC VP : ++ line : 26
CP: Identifier VP : a line : 26
CP: Bitwise Operators VP : | line : 26
CP: Identifier VP : b line : 26
CP: ) VP : ) line : 26
CP: ; VP : ; line : 26
CP: Identifier VP : a line : 27
CP: ( VP : ( line : 27
CP: Identifier VP : b line : 27
CP: , VP : , line : 27
CP: Identifier VP : c line : 27
CP: ) VP : ) line : 27
CP: ; VP : ; line : 27
CP: } VP : } line : 28
CP: Access Modifiers VP : public line : 30
CP: Data Types VP : var line : 30
CP: [ VP : [ line : 30
CP: ] VP : ] line : 30
CP: [ VP : [ line : 30
CP: ] VP : ] line : 30
CP: Identifier VP : a line : 30
CP: ( VP : ( line : 30
CP: Data Types VP : var line : 30
CP: Identifier VP : v line : 30
CP: [ VP : [ line : 30
CP: ] VP : ] line : 30
CP: [ VP : [ line : 30
CP: ] VP : ] line : 30
CP: , VP : , line : 30
CP: Identifier VP : fd line : 30
CP: Identifier VP : h line : 30
CP: [ VP : [ line : 30
CP: ] VP : ] line : 30
CP: ) VP : ) line : 30
CP: throws VP : throws line : 30
CP: Identifier VP : g line : 30
CP: { VP : { line : 31
CP: this VP : this line : 32
CP: . VP : . line : 32
CP: Identifier VP : a line : 32
CP: Assignment Operators VP : += line : 32
CP: Identifier VP : a line : 32
CP: . VP : . line : 32
CP: Identifier VP : f line : 32
CP: ( VP : ( line : 32
CP: ) VP : ) line : 32
CP: ; VP : ; line : 32
CP: Identifier VP : a line : 33
CP: INC/DEC VP : ++ line : 33
CP: . VP : . line : 33
CP: Identifier VP : b line : 33
CP: ; VP : ; line : 33
CP: INC/DEC VP : ++ line : 34
CP: Identifier VP : a line : 34
CP: ; VP : ; line : 34
CP: Identifier VP : gh line : 35
CP: Identifier VP : c line : 35
CP: = VP : = line : 35
CP: new VP : new line : 35
CP: Identifier VP : gh line : 35
CP: ( VP : ( line : 35
CP: ) VP : ) line : 35
CP: ; VP : ; line : 35
CP: Data Types VP : var line : 36
CP: Identifier VP : a line : 36
CP: ; VP : ; line : 36
CP: if VP : if line : 38
CP: ( VP : ( line : 38
CP: Identifier VP : a line : 38
CP: Relational Operators VP : > line : 38
CP: Var_Integer VP : 5 line : 38
CP: ) VP : ) line : 38
CP: { VP : { line : 38
CP: while VP : while line : 39
CP: ( VP : ( line : 39
CP: ! VP : ! line : 39
CP: ( VP : ( line : 39
CP: Identifier VP : a line : 39
CP: Relational Operators VP : == line : 39
CP: Var_Integer VP : 5 line : 39
CP: ) VP : ) line : 39
CP: ) VP : ) line : 39
CP: { VP : { line : 39
CP: Identifier VP : a line : 40
CP: = VP : = line : 40
CP: new VP : new line : 40
CP: Identifier VP : b line : 40
CP: ( VP : ( line : 40
CP: ) VP : ) line : 40
CP: ; VP : ; line : 40
CP: for VP : for line : 41
CP: ( VP : ( line : 41
CP: Identifier VP : a line : 41
CP: = VP : = line : 41
CP: Var_Integer VP : 7 line : 41
CP: ; VP : ; line : 41
CP: ( VP : ( line : 41
CP: Identifier VP : a line : 41
CP: Plus/Minus VP : + line : 41
CP: Var_Integer VP : 7 line : 41
CP: ) VP : ) line : 41
CP: Relational Operators VP : < line : 41
CP: Var_Integer VP : 7 line : 41
CP: Logical Operators VP : || line : 41
CP: Identifier VP : b line : 41
CP: . VP : . line : 41
CP: Identifier VP : g line : 41
CP: ( VP : ( line : 41
CP: ) VP : ) line : 41
CP: . VP : . line : 41
CP: Identifier VP : a line : 41
CP: . VP : . line : 41
CP: Identifier VP : fn line : 41
CP: ( VP : ( line : 41
CP: ) VP : ) line : 41
CP: ; VP : ; line : 41
CP: Identifier VP : a line : 41
CP: Assignment Operators VP : += line : 41
CP: Var_Integer VP : 5 line : 41
CP: ) VP : ) line : 41
CP: return VP : return line : 42
CP: Var_Bool VP : true line : 42
CP: ; VP : ; line : 42
CP: continue VP : continue line : 43
CP: ; VP : ; line : 43
CP: } VP : } line : 44
CP: return VP : return line : 45
CP: Identifier VP : a line : 45
CP: ; VP : ; line : 45
CP: } VP : } line : 46
CP: try VP : try line : 47
CP: { VP : { line : 47
CP: } VP : } line : 48
CP: catch VP : catch line : 49
CP: ( VP : ( line : 49
CP: Identifier VP : a line : 49
CP: Identifier VP : g line : 49
CP: ) VP : ) line : 49
CP: { VP : { line : 49
CP: } VP : } line : 50
CP: finally VP : finally line : 51
CP: { VP : { line : 51
CP: } VP : } line : 52
CP: } VP : } line : 53
CP: } VP : } line : 54
CP: Category VP : final line : 56
CP: class VP : class line : 56
CP: Identifier VP : b line : 56
CP: implements VP : implements line : 56
CP: Identifier VP : a line : 56
CP: { VP : { line : 56
CP: Access Modifiers VP : private line : 57
CP: Identifier VP : a line : 57
CP: [ VP : [ line : 57
CP: ] VP : ] line : 57
CP: Identifier VP : fn line : 57
CP: ( VP : ( line : 57
CP: ) VP : ) line : 57
CP: { VP : { line : 57
CP: do VP : do line : 58
CP: { VP : { line : 58
CP: switch VP : switch line : 59
CP: ( VP : ( line : 59
CP: Identifier VP : a line : 59
CP: ) VP : ) line : 59
CP: { VP : { line : 59
CP: case VP : case line : 60
CP: Identifier VP : a line : 60
CP: Logical Operators VP : || line : 60
CP: Identifier VP : b line : 60
CP: . VP : . line : 60
CP: Identifier VP : h line : 60
CP: ( VP : ( line : 60
CP: ) VP : ) line : 60
CP: : VP : : line : 60
CP: { VP : { line : 60
CP: } VP : } line : 61
CP: case VP : case line : 62
CP: Var_Integer VP : 5 line : 62
CP: : VP : : line : 62
CP: { VP : { line : 62
CP: } VP : } line : 63
CP: default VP : default line : 64
CP: : VP : : line : 64
CP: { VP : { line : 64
CP: } VP : } line : 65
CP: } VP : } line : 66
CP: } VP : } line : 67
CP: while VP : while line : 68
CP: ( VP : ( line : 68
CP: ! VP : ! line : 68
CP: ( VP : ( line : 68
CP: Identifier VP : a line : 68
CP: Logical Operators VP : || line : 68
CP: ( VP : ( line : 68
CP: Identifier VP : b line : 68
CP: Plus/Minus VP : + line : 68
CP: Var_Integer VP : 5 line : 68
CP: ) VP : ) line : 68
CP: Relational Operators VP : < line : 68
CP: Identifier VP : a line : 68
CP: . VP : . line : 68
CP: Identifier VP : h line : 68
CP: ( VP : ( line : 68
CP: ) VP : ) line : 68
CP: ) VP : ) line : 68
CP: ) VP : ) line : 68
CP: ; VP : ; line : 68
CP: } VP : } line : 69
CP: } VP : } line : 70
